---
import type IssueType from '../../types/issue';
import type ArticleType from '../../types/article';

import Headline from './Headline/Headline.astro';
import Article from './Article/Article.astro';

interface Props {
    issue: IssueType;
}

const { issue } = Astro.props;

function getHeadlineAndArticle(articles: ArticleType[]) {
    let otherArticles;
    let headline = articles.find((article) => article.headline);

    if(!headline) {
        return {
            headline: articles[0],
            articles: articles.slice(1),
        };      
    }

    otherArticles = articles.filter((article) => !article.headline);

    return { headline, articles: otherArticles };
}

const { headline, articles } = getHeadlineAndArticle(issue.articles);
---

<astro-articles data-button={`button-issue-${issue.id}`} data-issue={`issue-${issue.id}`} data-span={`span-${issue.id}`}>
    <section data-section={`section-${issue.title}`} data-date={issue.date} class="w-full max-w-[1472px] mx-auto flex flex-wrap relative mb-0 md:mb-10">
        <aside class="w-full md:w-1/2 flex flex-wrap">
            <Headline headline={headline} color={issue.color} title={issue.title} />
        </aside>
        <div class="w-full p-2.5 flex md:hidden" style={{ backgroundColor: issue.color }}>
            <button id={`button-issue-${issue.id}`} class="w-full border border-black p-2.5 flex justify-center items-center gt-america-light text-xs">
                <span>
                    <span id={`span-${issue.id}`}>View</span> {issue.title} {articles.length} {articles.length > 1 ? 'articles' : 'article'}
                </span>
            </button>
        </div>
        <div id={`issue-${issue.id}`} class="hidden w-full md:w-1/2  md:flex flex-col lg:grid lg:grid-cols-2 lg:gap-5 h-fit md:p-10 p-4">
            {articles && articles.length > 0 && articles.map((article) => (
                <Article article={article} />
            ))}
        </div>
    </section>
</astro-articles>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        class AstroArticles extends HTMLElement {
            constructor() {
                super();

                const dataButton = this.dataset.button;
                const dataIssue = this.dataset.issue;
                const dataSpan = this.dataset.span;

                if(!dataButton || !dataIssue || !dataSpan) {
                    return;
                }

                const button = document.getElementById(dataButton);
                const issue = document.getElementById(dataIssue);
                const span = document.getElementById(dataSpan);
                
                if(!button || !issue || !span) {
                    return;
                }

                button.addEventListener('click', () => {
                    issue.classList.toggle('hidden');
                    span.innerText = issue.classList.contains('hidden') ? 'View' : 'Close';

                    if(!issue.classList.contains('hidden')) {
                        const headerPos = window.innerWidth > 768 ? 155 : 113;
                        const issuePosition = issue.getBoundingClientRect().top + window.scrollY;
                        const scrollToPosition = issuePosition - headerPos;

                        window.scrollTo({
                            top: scrollToPosition,
                            behavior: 'smooth'
                        });
                    }
                });
            }
        }
        customElements.define('astro-articles', AstroArticles);
    });
</script>